addpath('SparseGH')

% =============== integrand: some function that evaluates g(x): (R times D)->(R times 1)
mu_p = 20;
sig_p_sq = 9;

f = 400;
b = 0.1;
sig_r_sq = 0.09;
y = f*b/mu_p + 0.05;

syms x real

phi = (x-mu_p)^2/sig_p_sq/2 + (y-f*b/x)^2/sig_r_sq/2;
phi_func = matlabFunction(phi, 'Vars', x);


%% ===== Gauss Hermite =====
% Weights
p = 10;
[roots, W] = getWeight(p)

%% Naive GH implementation for the integrations
p = 6;
mu = mu_p;
P = 9; %covariance, =sig^2
disp('E_Phi')
Int1 = GaussHermitOneDim(phi, p, mu, P)
% disp('E_xmu_phi')
% Int2 = GaussHermitOneDim(xmu_phi, p, mu, P)
% disp('E_xmumuT_phi')
% Int3 = GaussHermitOneDim(xmumuT_phi, p, mu, P)

%% Sparse GH integration
D = 1;    % dimensions
maxk = 10;  % max. accuracy level (pol. exactness wil be 2k-1)

for k=maxk
    % sparse grids integration:
    [x_sp w_sp] = nwspgr('GQN', D, k);
    % ===== Compare sigma points and weights
    x_sp
    roots
    
    w_sp
  	g = phi_func(x_sp);
    SGappr = g'*w_sp
    
%     SGerror = sqrt((SGappr - trueval).^2)/trueval;
%     % simulation with the same number of nodes, 1000 simulation repetitions
%     numnodes = length(w);
%     sim = zeros(1000,1);
%     for r=1:1000
%         x = rand(numnodes,D);
%         g = eval(func);
%         sim(r) = mean(g);
%     end
%     Simerror = sqrt(mean((sim-trueval).^2))/trueval;
%     fprintf('D=%2.0f, k=%2.0f (nodes=%4.0f): SG error=%8.5f, Sim. error=%8.5f\n', ...
%         [D,k,numnodes,SGerror,Simerror] )
end