/**
 * @file test_one_step_optimization.cpp
 * @author Hongzhe Yu (hyu419@gatech.edu)
 * @brief Test one step of the GVI-MP algorithm for a known experiment result. 
 * Any modifications of the algorithm should pass this test.
 * @version 0.1
 * @date 2023-08-07
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#include "helpers/ExperimentRunner.h"
#include "instances/gvimp/GVIMPPlanarPRSDF.h"
#include <gtest/gtest.h>
#include "GaussianVI/ngd/NGD-GH.h"
#include "GaussianVI/ngd/NGDFactorizedBase.h"

#define STRING(x) #x
#define XSTRING(x) STRING(x)
std::string source_root{XSTRING(SOURCE_ROOT)};

// using namespace gpmp2;
using namespace Eigen;
using namespace vimp;
using namespace std;
// using namespace gvi;

using SDFPR = gpmp2::ObstaclePlanarSDFFactor<gpmp2::PointRobotModel>;
using NGDFactorizedPlanarSDFPR = NGDFactorizedPlanarSDF<gpmp2::PointRobotModel>;

std::string config_file{source_root+"/configs/vimp/planar_pR_map1_new.xml"};
int nx = 4, nu = 2, num_exp = 2;
GVIMPRunner<GVIMPPlanarPRSDF> runner(nx, nu, num_exp, config_file);
GVIMPParams params;

// **** ground truths ****
double coeff_Qc = 0.8, temperature = 10.0, high_temperature = 100.0, 
    step_size = 0.35, eps_sdf = 0.5, sig_obs = 0.007, robot_radius=1.5,
    boundary_penalties = 10000.0, backtrack_ratio = 1.0, total_time=1.5;

int nt = 10;

Eigen::Vector2d map_origin{(VectorXd(2) << -20, -10).finished()};
double cell_size = 0.1;

std::string map_name{"2dpr_map1"};

// robot and sdf 
GVIMPPlanarPRSDF opt_robot_sdf = runner.optimizer_robot_sdf();
PlanarPRSDFExample robot_sdf = opt_robot_sdf.robot_sdf();

// Eigen helpers
EigenWrapper ei;

// The test should be conducted using the same configuations as follows.
TEST(GVIOnestep, parameter_settings){
    // **** read configurations ****
    runner.read_config(params);

    ASSERT_LE(abs(params.coeff_Qc() - coeff_Qc), 1e-8);
    ASSERT_LE(abs(params.temperature() - temperature), 1e-8);
    ASSERT_LE(abs(params.high_temperature() - high_temperature), 1e-8);
    ASSERT_LE(abs(params.step_size() - step_size), 1e-8);
    ASSERT_LE(abs(params.eps_sdf() - eps_sdf), 1e-8);
    ASSERT_LE(abs(params.sig_obs() - sig_obs), 1e-8);
    ASSERT_LE(abs(params.radius() - robot_radius), 1e-8);
    ASSERT_LE(abs(params.boundary_penalties() - boundary_penalties), 1e-8);
    ASSERT_LE(abs(params.backtrack_ratio() - backtrack_ratio), 1e-8);
    ASSERT_LE(abs(params.total_time() - total_time), 1e-8);
    ASSERT_LE(abs(params.nt() - nt), 1e-8);
    ASSERT_LE((robot_sdf.map_origin() - map_origin).norm(), 1e-8);
    ASSERT_LE(abs(robot_sdf.cell_size() - cell_size), 1e-8);

}

// **** Test the costs and all the intermidiate values ****
TEST(GVIOnestep, initial_values){
    std::cout << "***** read common configurations *****" << std::endl;
    runner.read_config(params);

    std::cout << "***** read boundary conditions *****" << std::endl;
    // ***** read boundary conditions *****
    rapidxml::file<> xmlFile(runner._config_file.data()); // Default template is char
    rapidxml::xml_document<> doc;
    doc.parse<0>(xmlFile.data());
    
    std::string ExpNodeName = "Experiment" + std::to_string(1);

    char * c_expname = ExpNodeName.data();
    rapidxml::xml_node<>* paramNode = doc.first_node(c_expname);
    
    runner.read_boundary_conditions(paramNode, params);

    std::cout << "***** Initialize the optimizer *****" << std::endl;
    // ***** Initialize the optimizer *****
    /// parameters
        int n_states = params.nt();
        int N = n_states - 1;
        const int dim_conf = robot_sdf.ndof() * robot_sdf.nlinks();
        // state: theta = [conf, vel_conf]
        const int dim_state = 2 * dim_conf; 
        /// joint dimension
        const int ndim = dim_state * n_states;

        VectorXd start_theta{ params.m0() };
        VectorXd goal_theta{ params.mT() };

        MatrixXd Qc{MatrixXd::Identity(dim_conf, dim_conf)*params.coeff_Qc()};
        MatrixXd K0_fixed{MatrixXd::Identity(dim_state, dim_state)/params.boundary_penalties()};

        /// Vector of base factored optimizers
        vector<std::shared_ptr<gvi::NGDFactorizedBase>> vec_factors;

        /// initial values
        VectorXd joint_init_theta{VectorXd::Zero(ndim)};
        VectorXd avg_vel{(goal_theta.segment(0, dim_conf) - start_theta.segment(0, dim_conf)) / params.total_time()};
        
        /// prior 
        double delt_t = params.total_time() / N;

        auto robot_model = robot_sdf.RobotModel();
        auto sdf = robot_sdf.sdf();
        double sig_obs = params.sig_obs(), eps_sdf = params.eps_sdf();
        double temperature = params.temperature();

        std::cout << "***** Initialize the optimizer *****" << std::endl;

        for (int i = 0; i < n_states; i++) {

            // initial state
            VectorXd theta_i{start_theta + double(i) * (goal_theta - start_theta) / N};

            // initial velocity: must have initial velocity for the fitst state??
            theta_i.segment(dim_conf, dim_conf) = avg_vel;
            joint_init_theta.segment(i*dim_state, dim_state) = std::move(theta_i);   

            MinimumAccGP lin_gp{Qc, i, delt_t, start_theta};

            // fixed start and goal priors
            // Factor Order: [fixed_gp_0, lin_gp_1, obs_1, ..., lin_gp_(N-1), obs_(N-1), lin_gp_(N), fixed_gp_(N)] 
            if (i==0 || i==n_states-1){

                // lin GP factor for the first and the last support state
                if (i == n_states-1){
                    // std::shared_ptr<gvi::LinearGpPrior> p_lin_gp{}; 
                    vec_factors.emplace_back(new gvi::LinearGpPrior{2*dim_state, 
                                                                dim_state, 
                                                                cost_linear_gp, 
                                                                lin_gp, 
                                                                n_states, 
                                                                i-1, 
                                                                params.temperature(), 
                                                                params.high_temperature()});
                }

                // Fixed gp factor
                FixedPriorGP fixed_gp{K0_fixed, MatrixXd{theta_i}};
                vec_factors.emplace_back(new FixedGpPrior{dim_state, 
                                                          dim_state, 
                                                          cost_fixed_gp, 
                                                          fixed_gp, 
                                                          n_states, 
                                                          i, 
                                                          params.temperature(), 
                                                          params.high_temperature()});

            }else{
                // linear gp factors
                vec_factors.emplace_back(new gvi::LinearGpPrior{2*dim_state, 
                                                            dim_state, 
                                                            cost_linear_gp, 
                                                            lin_gp, 
                                                            n_states, 
                                                            i-1, 
                                                            params.temperature(), 
                                                            params.high_temperature()});

                auto cost_sdf_pr = cost_obstacle_planar<gpmp2::PointRobotModel>;
                // collision factor
                vec_factors.emplace_back(new NGDFactorizedPlanarSDFPR{dim_conf, 
                                                                dim_state, 
                                                                cost_sdf_pr, 
                                                                SDFPR{gtsam::symbol('x', i), 
                                                                robot_model, 
                                                                sdf, 
                                                                sig_obs, 
                                                                eps_sdf}, 
                                                                n_states, 
                                                                i, 
                                                                temperature, 
                                                                params.high_temperature()});    
            }
        }

        std::cout << "***** Declare joint optimizer *****" << std::endl;

        /// The joint optimizer
        gvi::NGDGH<gvi::NGDFactorizedBase> optimizer{vec_factors, 
                                                    dim_state, 
                                                    n_states, 
                                                    params.max_iter(), 
                                                    params.temperature(), 
                                                    params.high_temperature()};

        std::cout << "***** Initialize joint optimizer *****" << std::endl;

        optimizer.set_max_iter_backtrack(params.max_n_backtrack());
        optimizer.set_niter_low_temperature(params.max_iter_lowtemp());
        optimizer.set_stop_err(params.stop_err());

        optimizer.update_file_names(params.saving_prefix());
        optimizer.set_mu(joint_init_theta);

        // initial precision matrix for the optimization
        optimizer.initilize_precision_matrix(params.initial_precision_factor());

        // ***** Test initial joint mean and covariance *****
        VectorXd joint_mean = optimizer.mean();
        SpMat joint_precision = optimizer.precision();

        MatrixXd init_precision(ndim, ndim);
        init_precision = MatrixXd::Identity(ndim, ndim)*params.initial_precision_factor();
        
        // init_precision.block(0, 0, dim_state, dim_state) = MatrixXd::Identity(dim_state, dim_state)*params.boundary_penalties();
        // init_precision.block((n_states-1)*dim_state, (n_states-1)*dim_state, dim_state, dim_state) = MatrixXd::Identity(dim_state, dim_state)*params.boundary_penalties();

        ASSERT_LE((joint_mean - joint_init_theta).norm(), 1e-8);
        ASSERT_LE((joint_precision - init_precision).norm(), 1e-8);

        std::cout << "***** Test the values before the optimization starts *****" << std::endl;
        // ***** Test the factor cost values *****
        VectorXd factor_cost_vec{optimizer.factor_cost_vector()};
        VectorXd factor_cost_vec_gt(19);
        factor_cost_vec_gt.setZero();

        EigenWrapper ei;
        ei.print_matrix(factor_cost_vec, "factor_cost_vec");

        factor_cost_vec_gt <<  0.399999999999981, 32.7327000000002, 0, 65.3999999999997, 0, 
                               65.3999999999997, 0, 65.3999999999997, 0.739105727743422, 65.3999999999997,
                               58.3163759352287, 65.3999999999997, 222.108617990813, 65.3999999999997, 145.689597500301,
                               65.3999999999997, 21.6208111387552, 32.7327000000002, 0.399999999999962;
        ASSERT_LE((factor_cost_vec - factor_cost_vec_gt).norm(), 1e-8);

        // ***** Test One step optimization *****
        // one step gradients
        std::tuple<VectorXd, SpMat> dmudprecision = optimizer.compute_gradients();

        VectorXd dmu_one_step = std::get<0>(dmudprecision);
        SpMat dprecision_one_step = std::get<1>(dmudprecision);

        // MatrixIO mio;
        // mio.saveData("dmu_onestep.csv", dmu_one_step);
        // mio.saveData("dprecision_onestep.csv", MatrixXd{dprecision_one_step});

        VectorXd Vdmu_one_step{optimizer.Vdmu()};
        MatrixXd Vddmu_one_step{optimizer.Vddmu()};

        VectorXd Vdmu_gt(ndim);
        Vdmu_gt.setZero();
        Vdmu_gt<< 0, 0, 0, 0, 0, 0, 0,
                  0, -2.87769807982841e-13, 0,
                  -2.39808173319034e-14, 0, 2.87769807982841e-13, 0,
                  -2.39808173319034e-14, 0, 3.97791188917929, 0.508761403327395,
                    0, 0, 62.1860445904482, 7.38298311375729e-14,
                    0, 0, 110.541566479321, 1.83939042141675, 4.79616346638068e-14,
                    0, -90.7936521658056, -3.5527136788005e-14, 4.79616346638068e-14,
                    0, -33.9682530137282, -4.44089209850063e-15, 0, 0,
                    0, 0, 0, 0;

        ASSERT_LE((Vdmu_one_step - Vdmu_gt).norm(), 1e-8);

        MatrixXd Vddmu_gt(ndim, ndim);
        Vddmu_gt.setZero();
        Vddmu_gt <<    2323.99999999995, 0, 27, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 2323.99999999995, 0, 27, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        27, 0, 2002.99999999995, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 27, 0, 2002.99999999995, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000018, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000018, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 662.396863457281, 2.63962853062749, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 2.63962853062749, 646.781632140921, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 684.133515365418, 4.9960036108132e-14, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 4.9960036108132e-14, 648.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 669.854935223751, 10.0747562586889, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 10.0747562586889, 641.28349582754, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 676.571414485489, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 648, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000036, 0, -27, 0, 1.5, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 676.571430996084, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 648, 0, 3.5527136788005e-15, 0, -324, 0, 27,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000009, 0, -27, 0, 1.5, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, 6.00000000000009, 0, -27, 0, 1.5,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 2323.99999999995, 0, -27, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 2323.99999999995, 0, -27,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, -27, 0, 2002.99999999995, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, -27, 0, 2002.99999999995;
        ASSERT_LE((Vddmu_one_step - Vddmu_gt).norm(), 1e-7);

        VectorXd dmu_gt(ndim);
        dmu_gt.setZero();
        dmu_gt<< -0.00509588286804194, 0.0434789828171249, -0.00230979508695942,
                 0.0176400851720914, -0.455856511644597, 3.42966035850035, -5.02934494519157,
                 37.3958710291656, -1.55571992958528, 11.435214194586, -7.79154326505658,
                 55.4501096100018, -2.92721333164946, 20.8394750972159, -8.28890475467324,
                 54.180355827695, -4.1928639127966, 28.421777672533, -6.52142941405214,
                 33.5866096822485, -5.09024058327872, 31.2403887626056, -4.55986811844314,
                 -1.31034857968193, -5.06558379513711, 27.4693041532037, 9.05194400569646,
                 -45.4897387114474, -2.38147903514197, 17.0040001844276, 17.1097999621166,
                 -72.9856909817231, -0.397686483366718, 5.51014647000758, 6.53100775770025,
                 -57.8323356591729, 0.0204418732955952, 0.095960942083943, 0.000745358958228711,
                -0.0296727437669396;

        ASSERT_LE((dmu_one_step - dmu_gt).norm(), 1e-7);

        MatrixXd dprecision_gt(ndim, ndim);
        dprecision_gt.setZero();
        dprecision_gt << -7676.00000000005, 0, 27, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, -7676.00000000005, 0, 27, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            27, 0, -7997.00000000005, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 27, 0, -7997.00000000005, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999982, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999982, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 652.396863457281, 2.63962853062749, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 2.63962853062749, 636.781632140921, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 674.133515365418, 4.9960036108132e-14, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 4.9960036108132e-14, 638.000000000001, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 659.854935223751, 10.0747562586889, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 10.0747562586889, 631.28349582754, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 666.571414485489, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 638, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999964, 0, -27, 0, 1.5, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 666.571430996084, 0, 3.5527136788005e-15, 0, -324, 0, 27, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, 638, 0, 3.5527136788005e-15, 0, -324, 0, 27,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999991, 0, -27, 0, 1.5, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, 3.5527136788005e-15, 0, -3.99999999999991, 0, -27, 0, 1.5,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, -7676.00000000005, 0, -27, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -27, 0, -7676.00000000005, 0, -27,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, -27, 0, -7997.00000000005, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1.5, 0, -27, 0, -7997.00000000005;
        ASSERT_LE((MatrixXd{dprecision_one_step} - dprecision_gt).norm(), 1e-7);
}

// ******** recover the results of a point robot map2 experiment ********
TEST(GVIMP, exp_map2){

    std::string source_root{XSTRING(SOURCE_ROOT)};
    int nx = 4, nu = 2, nt=15, num_exp = 1, low_temp_iterations=20, max_n_backtracking=20;

    double coeff_Qc = 0.8, temperature = 10.0, high_temperature = 100.0, 
    step_size = 0.45, eps_sdf = 0.7, sig_obs = 0.0035, radius=1.5,
    boundary_penalties = 10000.0, backtrack_ratio = 1.0, total_time=2.5,
    init_precision_factor = 20.0, max_iterations = 20, stop_err=1e-5;
    std::string map_name = "2dpr_map2";

    std::string config_file{source_root+"/configs/vimp/planar_pR_map2_new.xml"};
    GVIMPRunner<GVIMPPlanarPRSDF> runner(nx, nu, num_exp, config_file);

    GVIMPParams params{nx, nu, total_time, nt, coeff_Qc, sig_obs, eps_sdf, radius, 
                        step_size, max_iterations, init_precision_factor, boundary_penalties, 
                        temperature, high_temperature, low_temp_iterations, stop_err, max_n_backtracking, map_name};
    runner.run_one_exp(1, params, false);

    std::tuple<Eigen::VectorXd, SpMat> mu_precision_optimized = runner.get_mu_precision();
    VectorXd mean = std::get<0>(mu_precision_optimized);
    SpMat precision = std::get<1>(mu_precision_optimized);

    VectorXd means_optimized_gt(60);
    means_optimized_gt.setZero();
    means_optimized_gt << 7.03910933641284,-4.99587652059397,-6.79324247468038,8.40287968054441,
                        6.95602742215368,-2.82336348027418,2.53710119034785,15.5786303671236,
                        7.1777066423295,0.345078633205417,-1.02672754731237,19.0106454347922,
                        6.5709005392182,3.29739085742134,-4.90032263441372,11.2074607669129,
                        5.59016893533962,4.21433089873872,-6.04261539246959,1.16294955849191,
                        4.42755857270115,4.28878731954763,-6.93736083318209,0.796201562834344,
                        3.12727546738035,4.78338279442977,-7.58455153651818,5.21231603777517,
                        1.73400220696282,6.17460060542565,-7.97617996514894,10.0361974888158,
                        0.294328697220859,8.24876539995462,-8.10423434156532,12.8613217797791,
                        -1.14467826550204,10.6489560874433,-7.96871460599928,13.6876874899648,
                        -2.53595186387465,13.0182514927529,-7.56962066084212,12.5152946193727,
                        -3.89725422300098,14.9957568021162,-7.99607883661462,9.27738603904868,
                        -5.59295370652712,16.2046826472532,-11.8036949492611,3.90720462003808,
                        -8.00387089376527,16.264266240781,-13.7803014351811,-3.59524594963303,
                        -9.9815838650486,16.0805655708591,-6.80408597317522,8.38861229507337;

    ASSERT_LE((mean - means_optimized_gt).norm(), 1e-9);

    MatrixXd precision_optimized(60, 60);
    precision_optimized.setZero();
    precision_optimized << 3805.17004247108, 1.57945342801673e-12, 18.8329308212157, 4.16561117437047e-13, -210.928825197621, -1.61811036021211e-12, 18.832930821216, -1.28761173555351e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -2.99337845880255e-13, 3805.17004247108, 3.75396007894491e-14, 18.8329308212159, -3.60015039295084e-13, -210.928825197618, -2.423796236318e-13, 18.8329308212158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        18.832930821216, -1.94183241737667e-14, 3596.48323284742, -9.42749906883737e-15, -18.8329308212161, 6.24668958969071e-14, 1.12100778697713, 7.85321423308291e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -7.8701893269236e-14, 18.832930821216, -8.42954696259959e-15, 3596.48323284741, -5.77733649572013e-15, -18.8329308212159, -1.6408512839984e-14, 1.12100778697713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -210.928825197621, -1.53977708498947e-13, -18.832930821216, -1.07872215376996e-14, 432.496530686797, -31.7318742527688, 2.72657341670982e-12, 1.16731237907975e-12, -210.928825197668, 4.29292600798323e-12, 18.8329308212222, 4.3746889246049e-12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        1.74130784779163e-12, -210.928825197618, 1.45992224564462e-14, -18.8329308212159, -31.7318742527735, 421.868304895363, 1.84438920831732e-12, 1.61351862706976e-12, -1.3800835368096e-11, -210.928825197627, 1.89015648201017e-12, 18.8329308212185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        18.8329308212164, -1.64164744686571e-13, 1.12100778697714, -1.19558125394488e-14, 1.9872298709744e-12, 1.73564837397521e-12, 8.46963419109226, 1.65013140165849e-13, -18.8329308212165, -1.86078198250194e-12, 1.12100778697746, 1.56129699555238e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -2.32984953505835e-13, 18.8329308212158, -9.99045048392143e-15, 1.12100778697713, 7.72861702559743e-13, 1.924314981119e-12, 1.52064294777442e-13, 8.46963419109226, -6.09605328870916e-13, -18.8329308212167, -5.1375665827666e-14, 1.12100778697731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -210.928825197665, -1.63651329874285e-11, -18.8329308212165, -9.20749840444669e-13, 465.41088297188, -2.33880005462586, 7.08448693479709e-12, -8.49845852411981e-12, -210.928825197757, 3.87610501692166e-11, 18.8329308212216, 6.5861015689197e-12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1.16895556227079e-11, -210.92882519763, -1.07551613192349e-12, -18.8329308212167, -2.33880005465206, 425.205607355255, -4.18699486099298e-12, 1.27073809719449e-11, 2.73685261007649e-11, -210.928825197881, 4.74014313095373e-12, 18.8329308212279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 18.8329308212211, 2.61823742119184e-12, 1.12100778697739, 4.12511302460412e-14, 1.17935139409941e-11, -3.02639673041706e-12, 8.46963419109364, -4.42156240762212e-13, -18.8329308212327, 1.20437057953905e-11, 1.12100778697797, -9.33026601236435e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 3.58347358445215e-12, 18.8329308212182, 1.657131318071e-13, 1.12100778697729, -8.38098029054736e-12, 1.27211847714756e-11, -5.40947947205541e-13, 8.4696341910935, 9.88180121890814e-12, -18.8329308212333, -3.87552113003316e-13, 1.12100778697793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, -210.928825197776, -6.56897141448358e-12, -18.8329308212307, 8.90496744455635e-12, 415.097118063476, -13.5304321502293, -7.77566032624675e-12, -4.51080960332942e-12, -210.92882519766, 9.97402994867196e-11, 18.8329308212246, -3.15994765261371e-12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 9.02070612917206e-11, -210.928825197854, 1.56422567892748e-11, -18.8329308212325, -13.5304321502528, 461.401327825002, 9.65910154905908e-14, -8.31492878891482e-12, 1.06208586043801e-10, -210.928825197747, -1.12516974106141e-11, 18.8329308212116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212227, 5.95944604837165e-12, 1.12100778697785, -3.33784153991186e-13, -5.65942242577073e-12, -6.07867457166867e-12, 8.46963419109261, 2.19384750890725e-13, -18.8329308212135, 3.75222939026676e-12, 1.12100778697753, -2.56058200500232e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 4.7288128030125e-12, 18.8329308212279, -2.69374741837007e-13, 1.12100778697795, -4.74706340551818e-13, -1.09548295979316e-11, 2.41464622725208e-13, 8.46963419109288, 4.34311819922907e-13, -18.8329308212182, -3.9643519863908e-13, 1.12100778697669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197679, 1.53977500626967e-10, -18.832930821213, 2.42776744940188e-12, 425.843247562833, 9.88109908412509e-06, -8.48590698516826e-12, 4.41307969123187e-12, -210.928825197615, 3.39613555264496e-11, 18.8329308212156, -2.32505152915357e-12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.95467695858654e-11, -210.928825197752, 1.78031566234811e-12, -18.832930821219, 9.88113105780705e-06, 471.598680121636, 8.73694561560794e-12, 4.857814800918e-12, 3.17976860461634e-11, -210.928825197621, -1.50352130134152e-12, 18.8329308212158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212243, -1.33511384774828e-11, 1.12100778697735, -4.48989688337898e-13, -5.58198534028262e-12, 8.48568711770088e-12, 8.46963419109241, -9.28676116964699e-13, -18.8329308212134, 1.55119748294016e-12, 1.12100778697688, -7.55321646354429e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.03655772635086e-13, 18.832930821211, -3.46192758472874e-14, 1.12100778697675, 2.77641800789048e-13, 4.57465102547344e-12, -6.54548549032716e-13, 8.46963419109071, 2.15023826261867e-12, -18.8329308212152, -1.5044091717288e-13, 1.12100778697709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197612, 3.47300259399741e-11, -18.8329308212129, 2.40917397602587e-12, 425.843260087769, -1.25382024492513e-05, 1.30102639874492e-12, 3.82092797227293e-12, -210.928825197624, -1.96241841106047e-12, 18.8329308212164, 1.29362010105132e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.15837551562564e-11, -210.928825197623, 1.58186361627284e-12, -18.8329308212152, -1.25382017171959e-05, 476.297018336916, 1.95899415710265e-12, 5.92695896827105e-13, -2.0731363389713e-12, -210.928825197617, -6.54954235550304e-14, 18.8329308212157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212156, -1.74362489606133e-12, 1.12100778697687, -1.577848719025e-13, 1.11884541426603e-12, 2.08193596049464e-12, 8.46963419109209, -8.38602718824955e-14, -18.8329308212163, -5.31434481021329e-14, 1.12100778697713, -1.62109218219253e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.10254619328373e-12, 18.8329308212158, -5.73958963932748e-14, 1.12100778697711, 3.71927718431939e-12, 5.52723978141617e-13, -6.56030144080492e-14, 8.46963419109219, -9.66882230156265e-13, -18.832930821216, 7.01312374168759e-14, 1.12100778697713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197625, -1.10272418212962e-12, -18.8329308212163, -9.63476223288802e-13, 425.847253018853, -0.0848429144267783, -6.56912404216791e-13, -1.69860678235986e-13, -210.928825197617, 1.49562782221823e-13, 18.8329308212159, -1.08052256775239e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.18899686184118e-12, -210.928825197617, -7.64024242171853e-14, -18.832930821216, -0.0848429144263498, 468.489461597568, -1.30015036655321e-13, 1.64273241319257e-13, 7.14325882577522e-13, -210.928825197619, 1.03933012444392e-15, 18.832930821216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212164, -4.90804120074179e-14, 1.12100778697713, 7.59156704586552e-14, -6.85729414763387e-13, -1.65138356066007e-13, 8.46963419109225, -2.69548888059281e-15, -18.8329308212157, 2.31493773071439e-14, 1.12100778697713, -2.09938665318106e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.50040620467535e-13, 18.8329308212157, -1.17078142655282e-14, 1.12100778697714, -2.12316476239728e-13, 1.74014155672408e-13, -4.37080095131473e-15, 8.46963419109222, 8.67864241062538e-14, -18.832930821216, -2.3034986587121e-15, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197617, 5.88965558993622e-13, -18.8329308212157, 8.2309150061864e-14, 425.843253301164, 5.49852376134822e-08, 1.07213327433574e-13, 1.98992432374049e-14, -210.92882519762, 2.64463751858947e-14, 18.8329308212161, -7.35845604661155e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.04151201454413e-13, -210.928825197619, 2.17265873797554e-14, -18.832930821216, 5.49851223276397e-08, 425.843298154771, -7.80708961136482e-15, -1.05398646857194e-14, 9.55845103224576e-14, -210.928825197619, -2.38688060693183e-15, 18.832930821216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, 4.06397842309338e-15, 1.12100778697713, -2.21877822358255e-15, 9.82238437952529e-14, -1.41506334332681e-14, 8.46963419109228, 1.82387319139716e-16, -18.832930821216, -7.67899557012247e-17, 1.12100778697715, -3.54867333158343e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.12103595757929e-14, 18.832930821216, -1.65593328690374e-15, 1.12100778697714, 2.65058690391525e-14, -3.32426499252404e-14, 5.90764928685848e-16, 8.46963419109225, 6.53574328359543e-15, -18.832930821216, 2.14021122473963e-16, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.92882519762, 1.10115928082977e-13, -18.832930821216, 9.98597482236756e-15, 425.84329815995, -1.18807994286789e-14, 1.23714688847153e-13, 1.11655409466393e-14, -210.928825197622, -1.15175599040048e-14, 18.8329308212162, 4.10132553174203e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.32883555451613e-14, -210.928825197619, -1.86038093060685e-15, -18.832930821216, -2.29413783899984e-14, 425.843253438422, -1.09184789531366e-14, -1.22413202632959e-14, 5.65444213493074e-14, -210.928825197619, 2.78400109301698e-15, 18.832930821216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212161, -6.36873372699163e-15, 1.12100778697715, -1.49965162484412e-16, 8.77705665086791e-14, -8.31227784474068e-15, 8.46963419109228, -2.75651400644021e-16, -18.8329308212162, 4.77565904308273e-15, 1.12100778697715, -2.48627938368723e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7.15729459797532e-15, 18.832930821216, -2.67181028469939e-16, 1.12100778697714, 1.17234272456584e-14, -1.69757811852238e-15, -2.10677962986854e-16, 8.46963419109226, -3.02009532762076e-15, -18.832930821216, 6.09949027730716e-16, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197622, 4.49561122262349e-14, -18.8329308212162, -1.48811617149339e-15, 425.843253438425, 4.41070631003217e-14, -1.40421025139327e-13, 9.28848066380075e-15, -210.92882519762, -9.26542080408975e-14, 18.8329308212161, 6.10635094290018e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.88918832213552e-14, -210.928825197619, 4.02112583883831e-15, -18.832930821216, 4.93205563389297e-14, 425.843253438422, -2.43034275452031e-15, -4.53734231890029e-14, -5.32398314284224e-14, -210.928825197618, 5.19349058317095e-15, 18.8329308212159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.8329308212162, 1.35022040874602e-15, 1.12100778697716, 3.26819335315445e-16, -1.59303749134154e-13, 3.84241889249754e-15, 8.46963419109226, 8.06382475653599e-16, -18.832930821216, -7.61042662844968e-15, 1.12100778697715, 4.28634555254478e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.30594073496667e-15, 18.832930821216, -1.38532373856382e-16, 1.12100778697714, 7.53906971274303e-15, -7.295929164713e-14, 8.58489637348699e-16, 8.46963419109224, -6.77178367179237e-15, -18.8329308212159, 5.23248974430663e-16, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.92882519762, -7.91504544005078e-14, -18.832930821216, -9.38737978429172e-15, 435.3993355827, -6.83020057055739, -7.1501170846191e-14, -6.89515009688508e-16, -210.928825197619, -9.18021146647785e-14, 18.832930821216, 1.20698319672617e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.95856035303161e-14, -210.928825197618, -4.40456276039182e-15, -18.8329308212159, -6.83020057055744, 427.197099289695, 2.22964650237022e-15, 7.33547079064086e-14, -9.93332466419868e-14, -210.92882519762, 7.25920548991358e-15, 18.832930821216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, 7.71116969490073e-15, 1.12100778697714, 7.8599216419102e-16, -3.42688095188135e-14, -2.78891340378269e-15, 8.46963419109226, 1.00283340567318e-15, -18.832930821216, -6.10620531084541e-15, 1.12100778697714, 2.26799388172374e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.21201767192602e-15, 18.8329308212159, 2.78024036204261e-16, 1.12100778697714, 1.95092927733174e-15, 8.35427132202222e-14, 8.25557505979353e-16, 8.46963419109225, -6.57563622389503e-15, -18.832930821216, 5.16839868940158e-16, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197619, -1.0029820895631e-13, -18.832930821216, -6.68636440846575e-15, 467.705078601809, -2.08388590395099e-14, -4.84052255092061e-15, -3.30639503685923e-15, -210.928825197619, -7.92041854000659e-15, 18.832930821216, 5.88488919133516e-16, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7.33489992472986e-14, -210.92882519762, -5.86556597081811e-15, -18.832930821216, -4.20005114265261e-14, 425.843253438423, -6.94875028207941e-15, -2.91928461953881e-14, 2.07573063677205e-15, -210.928825197619, 1.66427527924782e-16, 18.832930821216, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, 5.04983809338282e-15, 1.12100778697714, 3.45820706689071e-16, -5.07209457638348e-15, -5.7958512872046e-15, 8.46963419109226, -5.53636737682456e-18, -18.832930821216, 1.46102063722469e-15, 1.12100778697714, -4.98353549112629e-17, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.0406300424571e-15, 18.832930821216, 2.55994240849617e-16, 1.12100778697715, -4.5067651976559e-15, -4.29506381110108e-14, 1.01022873493803e-16, 8.46963419109225, 9.62075128690732e-16, -18.832930821216, -7.2957117166424e-17, 1.12100778697714, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197619, -8.80174459205189e-15, -18.832930821216, 1.02575734076963e-16, 471.598624759715, 4.15767982005e-05, 1.95579957602243e-14, -6.96350737262041e-16, -210.928825197619, 7.65445798849794e-15, 18.832930821216, -1.79162351674491e-16, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.3114616777205e-15, -210.928825197619, 2.10510418532092e-15, -18.832930821216, 4.15767981932984e-05, 425.843269678503, 1.77480140487329e-16, 2.18191897303388e-14, 2.00281529816887e-15, -210.928825197619, -2.73786601519103e-16, 18.832930821216, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, 1.32925893971951e-15, 1.12100778697714, 2.60085864230112e-18, 2.57396672263677e-14, -5.31768063855468e-16, 8.46963419109225, 2.20390852489321e-17, -18.832930821216, 1.94743979214696e-16, 1.12100778697714, 4.63332852409918e-17, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.03170316574616e-16, 18.832930821216, -7.85434006880163e-17, 1.12100778697714, -6.82759314752687e-16, 2.22642320307903e-14, -6.51441494491214e-17, 8.46963419109227, 2.64950690122757e-16, -18.832930821216, -7.94665098200304e-17, 1.12100778697715, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197619, 1.61891353820608e-16, -18.832930821216, -5.79777260840751e-18, 425.868289169256, -1.44414072550991, -1.93188645230437e-14, -4.83037579620323e-16, -210.928825197619, 1.82641937033168e-15, 18.832930821216, -1.9368064496129e-16,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.14345545096138e-15, -210.928825197619, 8.47101032095244e-16, -18.832930821216, -1.44414072550991, 419.019928385579, 1.02961046075634e-15, 2.52645552826829e-14, -5.72549365481368e-16, -210.928825197619, 6.26889766831993e-17, 18.832930821216,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, -7.45152863244824e-16, 1.12100778697714, -1.77784263110786e-17, -1.55333830661574e-14, 9.85500793374142e-16, 8.46963419109225, -8.82401958450081e-18, -18.832930821216, -8.25405266038551e-17, 1.12100778697714, 3.97473146175287e-18,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.9021717354423e-16, 18.832930821216, -3.10770285139912e-17, 1.12100778697714, 8.93603768837811e-18, 2.28676923269216e-15, -1.95405516695746e-17, 8.46963419109227, 1.73359971981218e-16, -18.832930821216, -1.21940515581632e-17, 1.12100778697714,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210.928825197619, 2.35487496416766e-16, -18.832930821216, 1.64769866224234e-16, 3805.17004247109, -7.32864324687589e-16, -18.832930821216, 1.06563261950294e-16,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.7568041308514e-16, -210.928825197619, 3.42061090819597e-17, -18.832930821216, -5.53941197437235e-16, 3805.17004247109, 1.10542698300338e-16, -18.832930821216,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.832930821216, 1.17418784469917e-17, 1.12100778697714, -1.56624398490754e-17, -18.832930821216, 9.47026003330676e-17, 3596.48323284742, -5.59826935736777e-18,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.35619806051502e-17, 18.832930821216, -3.37967432494105e-18, 1.12100778697715, 3.02475957358183e-17, -18.832930821216, -1.9461077138919e-18, 3596.48323284742;

    ASSERT_LE((precision - precision_optimized).norm(), 1e-9);

}