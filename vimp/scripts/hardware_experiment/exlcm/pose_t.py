"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class pose_t(object):

    __slots__ = ["timestamp", "pose"]

    __typenames__ = ["int64_t", "double"]

    __dimensions__ = [None, [4, 4]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.pose = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        """ LCM Type: double[4][4] """

    def encode(self):
        buf = BytesIO()
        buf.write(pose_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.pose[i0][:4]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = pose_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.pose = []
        for i0 in range(4):
            self.pose.append(struct.unpack('>4d', buf.read(32)))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if pose_t in parents: return 0
        tmphash = (0x1a9289bde6dc897b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if pose_t._packed_fingerprint is None:
            pose_t._packed_fingerprint = struct.pack(">Q", pose_t._get_hash_recursive([]))
        return pose_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pose_t._get_packed_fingerprint())[0]

