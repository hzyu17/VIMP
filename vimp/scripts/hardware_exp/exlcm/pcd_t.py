"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class pcd_t(object):

    __slots__ = ["timestamp", "pose", "num_points", "points", "robot_base_offset"]

    __typenames__ = ["int64_t", "double", "int16_t", "double", "double"]

    __dimensions__ = [None, [4, 4], None, ["num_points", 3], [3]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.pose = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        """ LCM Type: double[4][4] """
        self.num_points = 0
        """ LCM Type: int16_t """
        self.points = []
        """ LCM Type: double[num_points][3] """
        self.robot_base_offset = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(pcd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.pose[i0][:4]))
        buf.write(struct.pack(">h", self.num_points))
        for i0 in range(self.num_points):
            buf.write(struct.pack('>3d', *self.points[i0][:3]))
        buf.write(struct.pack('>3d', *self.robot_base_offset[:3]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pcd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pcd_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = pcd_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.pose = []
        for i0 in range(4):
            self.pose.append(struct.unpack('>4d', buf.read(32)))
        self.num_points = struct.unpack(">h", buf.read(2))[0]
        self.points = []
        for i0 in range(self.num_points):
            self.points.append(struct.unpack('>3d', buf.read(24)))
        self.robot_base_offset = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if pcd_t in parents: return 0
        tmphash = (0xa96bf2aaea11148) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if pcd_t._packed_fingerprint is None:
            pcd_t._packed_fingerprint = struct.pack(">Q", pcd_t._get_hash_recursive([]))
        return pcd_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pcd_t._get_packed_fingerprint())[0]

